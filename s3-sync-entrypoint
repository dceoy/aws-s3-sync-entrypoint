#!/usr/bin/env bash
#
# Bash entrypoint to synchronize data with AWS S3 before and after command execution
#
# Usage:
#   s3-sync-entrypoint [--debug] [--dryrun] [--cp] (--input=<uri>)...
#       [--output=<uri>] (--inbound-sync-option=<arg>)...
#       (--outboud-sync-option=<arg>)... <command>...
#   s3-sync-entrypoint --version
#   s3-sync-entrypoint -h|--help
#
# Options:
#   --debug           Run with debug mode
#   --dryrun          Print commands without execution
#   --cp              Use `aws s3 cp` instead of `aws s3 sync`
#   --input=<uri>     Specify S3 input URIs
#                     (S3 data is transferred to "${LOCAL_INPUT_DIR}".)
#   --output=<uri>    Specify S3 output URIs
#                     (Local data is transferred from "${LOCAL_OUTPUT_DIR}".)
#   --inbound-sync-option=<arg>
#                     Specify an option of `aws s3 sync` for inbound sync
#                     (e.g., --inbound-sync-option='--exclude="*.zip"')
#   --outbound-sync-option=<arg>
#                     Specify an option of `aws s3 sync` for outbound sync
#   --version         Print the version and exit
#   -h, --help        Print the usage and exit
#
# Arguments:
#   <command>         Command to execute

set -euo pipefail

if [[ ${#} -ge 1 ]]; then
  for a in "${@}"; do
    [[ "${a}" = '--debug' ]] && set -x && break
  done
fi

SCRIPT_PATH=$(realpath "${0}")
SCRIPT_NAME=$(basename "${SCRIPT_PATH}")
SCRIPT_VERSION='v0.0.2'

DRYRUN=0
SYNC_COMMAND='sync'
S3_INPUT_URIS=()
S3_OUTPUT_URI=''
INBOUND_SYNC_OPTIONS=()
OUTBOUND_SYNC_OPTIONS=()
COMMANDS=()
START_DATE="$(date +%s)"

function print_version {
  echo "${SCRIPT_NAME}: ${SCRIPT_VERSION}"
}

function print_usage {
  sed -ne '1,2d; /^#/!q; s/^#$/# /; s/^# //p;' "${SCRIPT_PATH}"
}

function abort {
  {
    if [[ ${#} -eq 0 ]]; then
      cat -
    else
      SCRIPT_NAME=$(basename "${SCRIPT_PATH}")
      echo "${SCRIPT_NAME}: ${*}"
    fi
  } >&2
  exit 1
}

function validate_s3_prefix {
  for s in "${@}"; do
    [[ "${s}" =~ ^s3://.+ ]] || abort "invalid URI: ${s}"
  done
}

function echo_n_eval {
  printf "[%s]\t$ %s\n" "$(date)" "${*}"
  if [[ ${DRYRUN} -eq 0 ]]; then
    eval "${@}"
  fi
}

while [[ ${#} -ge 1 ]]; do
  case "${1}" in
    '--debug' )
      shift 1
      ;;
    '--dryrun' )
      DRYRUN=1 && shift 1
      ;;
    '--cp' )
      SYNC_COMMAND='cp' && shift 1
      ;;
    '--input' )
      S3_INPUT_URIS+=("${2}") && shift 2
      ;;
    --input=* )
      S3_INPUT_URIS+=("${1#*\=}") && shift 1
      ;;
    '--output' )
      S3_OUTPUT_URI="${2}" && shift 2
      ;;
    --output=* )
      S3_OUTPUT_URI="${1#*\=}" && shift 1
      ;;
    '--inbound-sync-option' )
      INBOUND_SYNC_OPTIONS+=("${2}") && shift 2
      ;;
    --inbound-sync-option=* )
      INBOUND_SYNC_OPTIONS+=("${1#*\=}") && shift 1
      ;;
    '--outbound-sync-option' )
      OUTBOUND_SYNC_OPTIONS+=("${2}") && shift 2
      ;;
    --outbound-sync-option=* )
      OUTBOUND_SYNC_OPTIONS+=("${1#*\=}") && shift 1
      ;;
    '--version' )
      print_version && exit 0
      ;;
    '-h' | '--help' )
      print_usage && exit 0
      ;;
    -* )
      abort "invalid option: ${1}"
      ;;
    * )
      COMMANDS=("${@:1}") && break
      ;;
  esac
done

printf "OSTYPE:               \t%s\n" "${OSTYPE}"
printf "BASH:                 \t%s\n" "$(command -v bash)"
printf "S3_SYNC_ENTRYPOINT:   \t%s\n" "${SCRIPT_PATH}"
printf "AWSCLI:               \t%s\n" "$(command -v aws)"
printf "PWD:                  \t%s\n" "${PWD}"

if [[ ${#S3_INPUT_URIS[@]} -gt 0 ]]; then
  printf "LOCAL_INPUT_DIR:      \t%s\n" "${LOCAL_INPUT_DIR}"
  printf "S3_INPUT_URIS:        \t%s\n" "${S3_INPUT_URIS[*]}"
  if [[ ${#INBOUND_SYNC_OPTIONS[@]} -gt 0 ]]; then
    printf "INBOUND_SYNC_OPTIONS: \t%s\n" "${INBOUND_SYNC_OPTIONS[*]}"
    INBOUND_SYNC="${SYNC_COMMAND} ${INBOUND_SYNC_OPTIONS[*]}"
  else
    INBOUND_SYNC="${SYNC_COMMAND}"
  fi
  validate_s3_prefix "${S3_INPUT_URIS[@]}"
fi

if [[ "${S3_OUTPUT_URI}" != '' ]]; then
  printf "LOCAL_OUTPUT_DIR:     \t%s\n" "${LOCAL_OUTPUT_DIR}"
  printf "S3_OUTPUT_URI:        \t%s\n" "${S3_OUTPUT_URI}"
  if [[ ${#OUTBOUND_SYNC_OPTIONS[@]} -gt 0 ]]; then
    printf "OUTBOUND_SYNC_OPTIONS: \t%s\n" "${OUTBOUND_SYNC_OPTIONS[*]}"
    OUTBOUND_SYNC="${SYNC_COMMAND} ${OUTBOUND_SYNC_OPTIONS[*]}"
  else
    OUTBOUND_SYNC="${SYNC_COMMAND}"
  fi
  validate_s3_prefix "${S3_OUTPUT_URI}"
fi

if [[ ${#COMMANDS[@]} -gt 0 ]]; then
  printf "COMMANDS:             \t%s\n" "${COMMANDS[*]}"
else
  abort "$(print_usage)"
fi


echo
echo_n_eval 'aws --version'

[[ -d "${LOCAL_INPUT_DIR}" ]] || echo_n_eval "mkdir -p ${LOCAL_INPUT_DIR}"
[[ -d "${LOCAL_OUTPUT_DIR}" ]] || echo_n_eval "mkdir -p ${LOCAL_OUTPUT_DIR}"

if [[ ${#S3_INPUT_URIS[@]} -gt 0 ]]; then
  for i in "${S3_INPUT_URIS[@]}"; do
    echo_n_eval "aws s3 ${INBOUND_SYNC} ${i} ${LOCAL_INPUT_DIR}"
  done
fi

echo_n_eval "${COMMANDS[@]}"

if [[ "${S3_OUTPUT_URI}" != '' ]]; then
  echo_n_eval "aws s3 ${OUTBOUND_SYNC} ${LOCAL_OUTPUT_DIR} ${S3_OUTPUT_URI}"
fi

echo
ELAPSED_SECONDS=$(( $(date +%s) - START_DATE ))
printf "TOTAL_ELAPSED_TIME:   \t%s\n" "$(date --date=@${ELAPSED_SECONDS} -u +%H:%M:%S)"
