#!/usr/bin/env bash
#
# Entrypoint command with data sync to and from AWS S3
#
# Usage:
#   s3-sync-entrypoint [--debug] [--dryrun] (--input=<uri>)...
#       (--output=<uri>)... <command>...
#   s3-sync-entrypoint --version
#   s3-sync-entrypoint -h|--help
#
# Options:
#   --debug           Run with debug mode
#   --dryrun          Print commands without execution
#   --input=<uri>     Specify S3 input URIs
#                     (S3 data is transferred to "${COMMAND_INPUT_DIR}".)
#   --output=<uri>    Specify S3 output URIs
#                     (Local data is transferred from "${COMMAND_OUTPUT_DIR}".)
#   --version         Print the version and exit
#   -h, --help        Print the usage and exit
#
# Arguments:
#   <command>         Command to execute

set -euo pipefail

if [[ ${#} -ge 1 ]]; then
  for a in "${@}"; do
    [[ "${a}" = '--debug' ]] && set -x && break
  done
fi

SCRIPT_PATH=$(realpath "${0}")
SCRIPT_NAME=$(basename "${SCRIPT_PATH}")
SCRIPT_VERSION='v0.0.1'

DRYRUN=0
S3_INPUT_URIS=()
S3_OUTPUT_URIS=()
COMMANDS=()

function print_version {
  echo "${SCRIPT_NAME}: ${SCRIPT_VERSION}"
}

function print_usage {
  sed -ne '1,2d; /^#/!q; s/^#$/# /; s/^# //p;' "${SCRIPT_PATH}"
}

function abort {
  {
    if [[ ${#} -eq 0 ]]; then
      cat -
    else
      SCRIPT_NAME=$(basename "${SCRIPT_PATH}")
      echo "${SCRIPT_NAME}: ${*}"
    fi
  } >&2
  exit 1
}

function bash_c {
  echo "\$ ${@}"
  if [[ ${DRYRUN} -eq 0 ]]; then
    bash -c "${*}"
  fi
}

while [[ ${#} -ge 1 ]]; do
  case "${1}" in
    '--debug' )
      shift 1
      ;;
    '--dryrun' )
      DRYRUN=1 && shift 1
      ;;
    '--input' )
      S3_INPUT_URIS+=("${2}") && shift 2
      ;;
    --input=* )
      S3_INPUT_URIS+=("${1#*\=}") && shift 1
      ;;
    '--output' )
      S3_OUTPUT_URIS+=("${2}") && shift 2
      ;;
    --output=* )
      S3_OUTPUT_URIS+=("${1#*\=}") && shift 1
      ;;
    '--version' )
      print_version && exit 0
      ;;
    '-h' | '--help' )
      print_usage && exit 0
      ;;
    * )
      COMMANDS=("${@:1}") && break
      ;;
  esac
done

printf "OSTYPE:             \t%s\n" "${OSTYPE}"
printf "BASH:               \t%s\n" "$(command -v bash)"
printf "SCRIPT_PATH:        \t%s\n" "${SCRIPT_PATH}"
printf "PWD:                \t%s\n" "${PWD}"
printf "AWSCLI:             \t%s\n" "$(command -v aws)"

if [[ ${#COMMANDS[@]} -gt 0 ]]; then
  printf "COMMANDS:           \t%s\n" "${COMMANDS[@]}"
else
  abort "$(print_usage)"
fi

if [[ ${#S3_INPUT_URIS[@]} -gt 0 ]]; then
  printf "S3_INPUT_URIS:      \t%s\n" "${S3_INPUT_URIS[@]}"
  printf "COMMAND_INPUT_DIR:  \t%s\n" "${COMMAND_INPUT_DIR}"
else
  printf "COMMAND_INPUT_DIR:  \t%s\n" '(NA)'
fi

if [[ ${#S3_OUTPUT_URIS[@]} -gt 0 ]]; then
  printf "S3_OUTPUT_URIS:      \t%s\n" "${S3_OUTPUT_URIS[@]}"
  printf "COMMAND_OUTPUT_DIR:  \t%s\n" "${COMMAND_OUTPUT_DIR}"
else
  printf "COMMAND_OUTPUT_DIR:  \t%s\n" '(NA)'
fi


bash_c 'aws --version'

if [[ ${#S3_INPUT_URIS[@]} -gt 0 ]]; then
  for i in "${S3_INPUT_URIS[@]}"; do
    n=$(basename "${i}")
    bash_c "aws s3 sync ${i} ${COMMAND_INPUT_DIR}/${n}"
  done
fi

bash_c "${COMMANDS[*]}"

if [[ ${#S3_OUTPUT_URIS[@]} -gt 0 ]]; then
  for o in "${S3_OUTPUT_URIS[@]}"; do
    n=$(basename "${o}")
    bash_c "aws s3 sync ${COMMAND_OUTPUT_DIR}/${n} ${o}"
  done
fi
