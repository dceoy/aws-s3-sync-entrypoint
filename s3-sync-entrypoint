#!/usr/bin/env bash
#
# Bash entrypoint to synchronize data with AWS S3 before and after command execution
#
# Usage:
#   s3-sync-entrypoint [--debug] [--dryrun] [--cp] (--input-s3=<uri>)...
#       [--output-s3=<uri>] (--inbound-sync-option=<arg>)...
#       (--outbound-sync-option=<arg>)... [--input-data-dir=<path>]
#       [--output-data-dir=<path>] [--upload-log-to-s3=<uri>]
#       [--skip-output-on-failure] [--suppress-expansion] <command>...
#   s3-sync-entrypoint --version
#   s3-sync-entrypoint -h|--help
#
# Options:
#   --debug             Run with debug mode
#   --dryrun            Print commands without execution
#   --cp                Use `aws s3 cp` instead of `aws s3 sync`
#   --input-s3=<uri>    Specify input S3 URIs
#                       (Data is transferred from S3 to `${INPUT_DATA_DIR}`.)
#   --output-s3=<uri>   Specify an output S3 URI
#                       (Data is transferred from `${OUTPUT_DATA_DIR}` to S3.)
#   --inbound-sync-option=<arg>
#                       Specify an option of `aws s3 sync` for inbound sync
#                       (e.g., --inbound-sync-option='--exclude="*.zip"')
#   --outbound-sync-option=<arg>
#                       Specify an option of `aws s3 sync` for outbound sync
#   --input-data-dir=<path>
#                       Specify a local directory path for input data from S3
#                       (This overrides `${INPUT_DATA_DIR}`.)
#   --output-data-dir=<path>
#                       Specify a local directory path for output data to S3
#                       (This overrides `${OUTPUT_DATA_DIR}`.)
#   --upload-log-to-s3=<uri>
#                       Upload a log file to S3 after processes are completed
#   --skip-output-on-failure
#                       Skip outbound sync if a command fails
#   --suppress-expansion
#                       Avoid extending environment variables in arguments
#   --version           Print the version and exit
#   -h, --help          Print the usage and exit
#
# Arguments:
#   <command>           A command and arguments for it


set -euo pipefail

if [[ ${#} -ge 1 ]]; then
  for a in "${@}"; do
    [[ "${a}" = '--debug' ]] && set -x && break
  done
fi

SCRIPT_PATH=$(realpath "${0}")
SCRIPT_NAME=$(basename "${SCRIPT_PATH}")
SCRIPT_VERSION='v0.1.2'

DRYRUN=0
SKIP_OUTPUT_ON_ERROR=0
SYNC_COMMAND='sync'
INPUT_S3_URIS=()
OUTPUT_S3_URI=''
INBOUND_SYNC_OPTIONS=()
OUTBOUND_SYNC_OPTIONS=()
OUTPUT_LOG_FILE='/tmp/s3-sync-entrypoint.log.txt'
OUTPUT_LOG_S3_URI=''
COMMAND=()
START_DATE="$(date +%s)"
SUPPRESS_EXPANSION=0
for a in "${@}"; do
  [[ "${a}" = '--suppress-expansion' ]] && SUPPRESS_EXPANSION=1 && break
done

function print_version {
  echo "${SCRIPT_NAME}: ${SCRIPT_VERSION}"
}

function print_usage {
  sed -ne '1,2d; /^#/!q; s/^#$/# /; s/^# //p;' "${SCRIPT_PATH}"
}

function abort {
  {
    if [[ ${#} -eq 0 ]]; then
      cat -
    else
      SCRIPT_NAME=$(basename "${SCRIPT_PATH}")
      echo "${SCRIPT_NAME}: ${*}"
    fi
  } >&2
  exit 1
}

function validate_s3_uri {
  for s in "${@}"; do
    aws s3 ls "${s}" > /dev/null
  done
}

function echo_n_eval {
  printf "[%s]  $ %s\n" "$(date)" "${*}"
  if [[ ${DRYRUN} -eq 0 ]]; then
    eval "${@}"
  fi
}

function echo_n_log {
  if [[ -n "${OUTPUT_LOG_S3_URI}" ]]; then
    echo "${*}" | tee -a "${OUTPUT_LOG_FILE}"
  else
    echo "${*}"
  fi
}

function read_str {
  if [[ ${SUPPRESS_EXPANSION} -eq 0 ]]; then
    eval "echo -n ${*}"
  else
    echo -n "${*}"
  fi
}

while [[ ${#} -ge 1 ]]; do
  case "${1}" in
    '-h' | '--help' )
      print_usage && exit 0
      ;;
    '--version' )
      print_version && exit 0
      ;;
    '--debug' )
      shift 1
      ;;
    '--suppress-expansion' )
      shift 1
      ;;
    '--dryrun' )
      DRYRUN=1 && shift 1
      ;;
    '--skip-output-on-failure' )
      SKIP_OUTPUT_ON_ERROR=1 && shift 1
      ;;
    '--cp' )
      SYNC_COMMAND='cp' && shift 1
      ;;
    '--input-s3' )
      INPUT_S3_URIS+=("$(read_str "${2}")") && shift 2
      ;;
    --input-s3=* )
      INPUT_S3_URIS+=("$(read_str "${1#*\=}")") && shift 1
      ;;
    '--output-s3' )
      OUTPUT_S3_URI="$(read_str "${2}")" && shift 2
      ;;
    --output-s3=* )
      OUTPUT_S3_URI="$(read_str "${1#*\=}")" && shift 1
      ;;
    '--inbound-sync-option' )
      INBOUND_SYNC_OPTIONS+=("$(read_str "${2}")") && shift 2
      ;;
    --inbound-sync-option=* )
      INBOUND_SYNC_OPTIONS+=("$(read_str "${1#*\=}")") && shift 1
      ;;
    '--outbound-sync-option' )
      OUTBOUND_SYNC_OPTIONS+=("$(read_str "${2}")") && shift 2
      ;;
    --outbound-sync-option=* )
      OUTBOUND_SYNC_OPTIONS+=("$(read_str "${1#*\=}")") && shift 1
      ;;
    '--input-data-dir' )
      INPUT_DATA_DIR="$(read_str "${2}")" && shift 2
      ;;
    --input-data-dir=* )
      INPUT_DATA_DIR="$(read_str "${1#*\=}")" && shift 1
      ;;
    '--output-data-dir' )
      OUTPUT_DATA_DIR="$(read_str "${2}")" && shift 2
      ;;
    --output-data-dir=* )
      OUTPUT_DATA_DIR="$(read_str "${1#*\=}")" && shift 1
      ;;
    '--upload-log-to-s3' )
      OUTPUT_LOG_S3_URI="$(read_str "${2}")" && shift 2
      ;;
    --upload-log-to-s3=* )
      OUTPUT_LOG_S3_URI="$(read_str "${1#*\=}")" && shift 1
      ;;
    -* )
      abort "invalid option: ${1}"
      ;;
    * )
      COMMAND=("$(read_str "${@:1}")") && break
      ;;
  esac
done

[[ -n "${OUTPUT_LOG_S3_URI}" ]] && echo -n > "${OUTPUT_LOG_FILE}"

echo_n_log "OSTYPE:               ${OSTYPE}"
echo_n_log "BASH:                 $(command -v bash)"
echo_n_log "S3_SYNC_ENTRYPOINT:   ${SCRIPT_PATH}"
echo_n_log "PWD:                  ${PWD}"
echo_n_log "AWSCLI:               $(command -v aws)"
echo_n_log "AWSCLI_VERSION        $(aws --version)"

if [[ ${#INPUT_S3_URIS[@]} -gt 0 ]]; then
  echo_n_log "INPUT_DATA_DIR:       ${INPUT_DATA_DIR}"
  echo_n_log "INPUT_S3_URIS:        ${INPUT_S3_URIS[*]}"
  if [[ ${#INBOUND_SYNC_OPTIONS[@]} -gt 0 ]]; then
    INBOUND_SYNC="${SYNC_COMMAND} ${INBOUND_SYNC_OPTIONS[*]}"
  else
    INBOUND_SYNC="${SYNC_COMMAND}"
  fi
  echo_n_log "INBOUND_SYNC:         ${INBOUND_SYNC}"
  validate_s3_uri "${INPUT_S3_URIS[@]}"
fi

if [[ -n "${OUTPUT_S3_URI}" ]]; then
  echo_n_log "OUTPUT_DATA_DIR:      ${OUTPUT_DATA_DIR}"
  echo_n_log "OUTPUT_S3_URI:        ${OUTPUT_S3_URI}"
  if [[ ${#OUTBOUND_SYNC_OPTIONS[@]} -gt 0 ]]; then
    OUTBOUND_SYNC="${SYNC_COMMAND} ${OUTBOUND_SYNC_OPTIONS[*]}"
  else
    OUTBOUND_SYNC="${SYNC_COMMAND}"
  fi
  echo_n_log "OUTBOUND_SYNC:        ${OUTBOUND_SYNC}"
  validate_s3_uri "${OUTPUT_S3_URI}"
fi

if [[ ${#COMMAND[@]} -gt 0 ]]; then
  echo_n_log "COMMAND:              ${COMMAND[*]}"
else
  abort "$(print_usage)"
fi


echo
[[ -d "${INPUT_DATA_DIR}" ]] || echo_n_eval "mkdir -p ${INPUT_DATA_DIR}"
[[ -d "${OUTPUT_DATA_DIR}" ]] || echo_n_eval "mkdir -p ${OUTPUT_DATA_DIR}"

if [[ ${#INPUT_S3_URIS[@]} -gt 0 ]]; then
  for i in "${INPUT_S3_URIS[@]}"; do
    echo_n_eval "aws s3 ${INBOUND_SYNC} ${i} ${INPUT_DATA_DIR}"
  done
fi

echo_n_eval "${COMMAND[@]}" \
  && COMMAND_EXIT_CODE="${?}" \
  || COMMAND_EXIT_CODE="${?}"
echo_n_log "COMMAND_EXIT_CODE:    ${COMMAND_EXIT_CODE}"

if [[ -n "${OUTPUT_S3_URI}" ]]; then
  if [[ ${SKIP_OUTPUT_ON_ERROR} -ne 0 ]] && [[ ${COMMAND_EXIT_CODE} -ne 0 ]]; then
    echo 'The outbound sync was skipped due to the exit code.'
  else
    echo_n_eval "aws s3 ${OUTBOUND_SYNC} ${OUTPUT_DATA_DIR} ${OUTPUT_S3_URI}"
  fi
fi

echo
ELAPSED_SECONDS=$(( $(date +%s) - START_DATE ))
echo_n_log "TOTAL_ELAPSED_TIME:   $(date --date=@${ELAPSED_SECONDS} -u +%H:%M:%S)"

if [[ -n "${OUTPUT_LOG_S3_URI}" ]]; then
  if [[ ${SKIP_OUTPUT_ON_ERROR} -eq 0 ]] || [[ ${COMMAND_EXIT_CODE} -eq 0 ]]; then
    echo_n_eval "aws s3 cp ${OUTPUT_LOG_FILE} ${OUTPUT_LOG_S3_URI}"
  fi
fi

exit "${COMMAND_EXIT_CODE}"
