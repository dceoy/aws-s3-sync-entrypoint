#!/usr/bin/env bash
#
# Bash entrypoint to synchronize data with AWS S3 before and after command execution
#
# Usage:
#   s3-sync-entrypoint [--debug] [--dryrun] (--input-s3=<uri>)...
#       [--output-s3=<uri>] (--inbound-sync-option=<arg>)...
#       (--outbound-sync-option=<arg>)... [--input-data-dir=<path>]
#       [--output-data-dir=<path>] [--upload-log-to-s3=<uri>]
#       [--skip-output-on-failure] [--disable-lookup] <command>...
#   s3-sync-entrypoint --version
#   s3-sync-entrypoint -h|--help
#
# Options:
#   --debug             Enable debug mode
#   --dryrun            Print commands without execution
#   --input-s3=<uri>    Specify input S3 URIs
#                       (Data is transferred from S3 to `${INPUT_DATA_DIR}`.)
#   --output-s3=<uri>   Specify an output S3 URI
#                       (Data is transferred from `${OUTPUT_DATA_DIR}` to S3.)
#   --inbound-sync-option=<arg>
#                       Specify an option of `aws s3 sync` for inbound sync
#                       (e.g., --inbound-sync-option='--exclude="*.zip"')
#   --outbound-sync-option=<arg>
#                       Specify an option of `aws s3 sync` for outbound sync
#   --input-data-dir=<path>
#                       Specify a local directory path for input data from S3
#                       (This overrides `${INPUT_DATA_DIR}`.)
#   --output-data-dir=<path>
#                       Specify a local directory path for output data to S3
#                       (This overrides `${OUTPUT_DATA_DIR}`.)
#   --upload-log-to-s3=<uri>
#                       Upload a log file to S3 after processes are completed
#   --skip-output-on-failure
#                       Skip outbound sync if a command fails
#   --disable-lookup    Avoid looking up environment variables in arguments
#   --version           Print version information and exit
#   -h, --help          Print this help text and exit
#
# Arguments:
#   <command>           A command and arguments for it


set -eo pipefail

if [[ ${#} -ge 1 ]]; then
  for a in "${@}"; do
    [[ "${a}" = '--debug' ]] && set -x && break
  done
fi

[[ -n "${INPUT_DATA_DIR}" ]] || INPUT_DATA_DIR="${PWD}"
[[ -n "${OUTPUT_DATA_DIR}" ]] || OUTPUT_DATA_DIR="${PWD}"

set -u

ARGV=("${*}")
SSE_SCRIPT_PATH=$(realpath "${0}")
SSE_SCRIPT_NAME=$(basename "${SSE_SCRIPT_PATH}")
SSE_SCRIPT_VERSION='v0.1.5'
SSE_DRYRUN=0
SSE_SKIP_OUTPUT_ON_ERROR=0
SSE_INPUT_S3_URIS=()
SSE_OUTPUT_S3_URI=''
SSE_INBOUND_SYNC_OPTIONS=()
SSE_OUTBOUND_SYNC_OPTIONS=()
SSE_OUTPUT_LOG_FILE='/tmp/s3-sync-entrypoint.log.txt'
SSE_OUTPUT_LOG_S3_URI=''
SSE_COMMAND=()
SSE_START_DATE="$(date +%s)"
SSE_DISABLE_LOOKUP=0
for a in "${@}"; do
  [[ "${a}" = '--disable-lookup' ]] && SSE_DISABLE_LOOKUP=1 && break
done

function print_version {
  echo -e "${SSE_SCRIPT_NAME}: ${SSE_SCRIPT_VERSION}"
}

function print_usage {
  sed -ne '1,2d; /^#/!q; s/^#$/# /; s/^# //p;' "${SSE_SCRIPT_PATH}"
}

function abort {
  {
    if [[ ${#} -eq 0 ]]; then
      cat -
    else
      SSE_SCRIPT_NAME=$(basename "${SSE_SCRIPT_PATH}")
      echo -e "${SSE_SCRIPT_NAME}: ${*}"
    fi
  } >&2
  exit 1
}

function read_str {
  if [[ ${SSE_DISABLE_LOOKUP} -eq 0 ]]; then
    eval "set -eu && echo -e ${*}" || abort
  else
    echo -e "${*}"
  fi
}

function validate_s3_uri {
  for s in "${@}"; do
    [[ "${s}" =~ ^s3://.+ ]] || abort "invalid URI: ${s}"
  done
}

function validate_s3_object {
  for s in "${@}"; do
    aws s3 ls "${s}" > /dev/null || abort "object not found: ${s}"
  done
}

function echo_n_eval {
  printf "[%s]  $ %s\n" "$(date)" "${*}"
  if [[ ${SSE_DRYRUN} -eq 0 ]]; then
    eval "${*}"
  fi
}

function echo_n_log {
  if [[ -n "${SSE_OUTPUT_LOG_S3_URI}" ]]; then
    echo -e "${*}" | tee -a "${SSE_OUTPUT_LOG_FILE}"
  else
    echo -e "${*}"
  fi
}

while [[ ${#} -ge 1 ]]; do
  case "${1}" in
    -h | --help )
      print_usage && exit 0
      ;;
    --version )
      print_version && exit 0
      ;;
    --debug )
      shift 1
      ;;
    --disable-lookup )
      shift 1
      ;;
    --dryrun )
      SSE_DRYRUN=1 && shift 1
      ;;
    --skip-output-on-failure )
      SSE_SKIP_OUTPUT_ON_ERROR=1 && shift 1
      ;;
    --input-s3 )
      SSE_INPUT_S3_URIS+=("$(read_str "${2}")") && shift 2
      ;;
    --input-s3=* )
      SSE_INPUT_S3_URIS+=("$(read_str "${1#*\=}")") && shift 1
      ;;
    --output-s3 )
      SSE_OUTPUT_S3_URI="$(read_str "${2}")" && shift 2
      ;;
    --output-s3=* )
      SSE_OUTPUT_S3_URI="$(read_str "${1#*\=}")" && shift 1
      ;;
    --inbound-sync-option )
      SSE_INBOUND_SYNC_OPTIONS+=("$(read_str "${2}")") && shift 2
      ;;
    --inbound-sync-option=* )
      SSE_INBOUND_SYNC_OPTIONS+=("$(read_str "${1#*\=}")") && shift 1
      ;;
    --outbound-sync-option )
      SSE_OUTBOUND_SYNC_OPTIONS+=("$(read_str "${2}")") && shift 2
      ;;
    --outbound-sync-option=* )
      SSE_OUTBOUND_SYNC_OPTIONS+=("$(read_str "${1#*\=}")") && shift 1
      ;;
    --input-data-dir )
      INPUT_DATA_DIR="$(read_str "${2}")" && shift 2
      ;;
    --input-data-dir=* )
      INPUT_DATA_DIR="$(read_str "${1#*\=}")" && shift 1
      ;;
    --output-data-dir )
      OUTPUT_DATA_DIR="$(read_str "${2}")" && shift 2
      ;;
    --output-data-dir=* )
      OUTPUT_DATA_DIR="$(read_str "${1#*\=}")" && shift 1
      ;;
    --upload-log-to-s3 )
      SSE_OUTPUT_LOG_S3_URI="$(read_str "${2}")" && shift 2
      ;;
    --upload-log-to-s3=* )
      SSE_OUTPUT_LOG_S3_URI="$(read_str "${1#*\=}")" && shift 1
      ;;
    -* )
      abort "invalid option: ${1}"
      ;;
    * )
      SSE_COMMAND=("$(read_str "${@:1}")") && break
      ;;
  esac
done

[[ -n "${SSE_OUTPUT_LOG_S3_URI}" ]] && echo -ne > "${SSE_OUTPUT_LOG_FILE}"

echo_n_log "ARGV:                 ${ARGV[*]}"
echo_n_log "OSTYPE:               ${OSTYPE}"
echo_n_log "BASH:                 $(command -v bash)"
echo_n_log "S3_SYNC_ENTRYPOINT:   ${SSE_SCRIPT_PATH}"
echo_n_log "PWD:                  ${PWD}"
echo_n_log "AWSCLI:               $(command -v aws)"
echo_n_log "AWSCLI_VERSION:       $(aws --version)"

if [[ ${#SSE_INPUT_S3_URIS[@]} -gt 0 ]]; then
  echo_n_log "INPUT_DATA_DIR:       ${INPUT_DATA_DIR}"
  echo_n_log "INPUT_S3_URIS:        ${SSE_INPUT_S3_URIS[*]}"
  SSE_INBOUND_EXCL_SYNC="sync --exclude='*'"
  if [[ ${#SSE_INBOUND_SYNC_OPTIONS[@]} -gt 0 ]]; then
    SSE_INBOUND_SYNC="sync ${SSE_INBOUND_SYNC_OPTIONS[*]}"
    for a in "${SSE_INBOUND_SYNC_OPTIONS[@]}"; do
      [[ "${a}" =~ ^--(in|ex)clude= ]] || SSE_INBOUND_EXCL_SYNC+=" ${a}"
    done
  else
    SSE_INBOUND_SYNC="sync"
  fi
  echo_n_log "INBOUND_SYNC:         ${SSE_INBOUND_SYNC}"
  echo_n_log "INBOUND_EXCL_SYNC:    ${SSE_INBOUND_EXCL_SYNC}"
  validate_s3_object "${SSE_INPUT_S3_URIS[@]}"
fi

if [[ -n "${SSE_OUTPUT_S3_URI}" ]]; then
  echo_n_log "OUTPUT_DATA_DIR:      ${OUTPUT_DATA_DIR}"
  echo_n_log "OUTPUT_S3_URI:        ${SSE_OUTPUT_S3_URI}"
  if [[ ${#SSE_OUTBOUND_SYNC_OPTIONS[@]} -gt 0 ]]; then
    SSE_OUTBOUND_SYNC="sync ${SSE_OUTBOUND_SYNC_OPTIONS[*]}"
  else
    SSE_OUTBOUND_SYNC="sync"
  fi
  echo_n_log "OUTBOUND_SYNC:        ${SSE_OUTBOUND_SYNC}"
  validate_s3_uri "${SSE_OUTPUT_S3_URI}"
fi

if [[ -n "${SSE_OUTPUT_LOG_S3_URI}" ]]; then
  validate_s3_uri "${SSE_OUTPUT_LOG_S3_URI}"
fi

if [[ ${#SSE_COMMAND[@]} -gt 0 ]]; then
  echo_n_log "COMMAND:              ${SSE_COMMAND[*]}"
else
  abort "$(print_usage)"
fi


echo
[[ -d "${INPUT_DATA_DIR}" ]] || echo_n_eval "mkdir -p ${INPUT_DATA_DIR}"
[[ -d "${OUTPUT_DATA_DIR}" ]] || echo_n_eval "mkdir -p ${OUTPUT_DATA_DIR}"

if [[ ${#SSE_INPUT_S3_URIS[@]} -gt 0 ]]; then
  for i in "${SSE_INPUT_S3_URIS[@]}"; do
    if [[ "${i}" =~ /$ ]]; then
      echo_n_eval "aws s3 ${SSE_INBOUND_SYNC} ${i} ${INPUT_DATA_DIR%/}/"
    else
      f="$(basename "${i}")"
      d="$(dirname "${i}")"
      echo_n_eval "aws s3 ${SSE_INBOUND_EXCL_SYNC} --include='${f}' ${d%/}/ ${INPUT_DATA_DIR%/}/"
    fi
  done
fi

echo_n_eval "${SSE_COMMAND[@]}" \
  && SSE_COMMAND_EXIT_CODE="${?}" \
  || SSE_COMMAND_EXIT_CODE="${?}"
echo_n_log "COMMAND_EXIT_CODE:    ${SSE_COMMAND_EXIT_CODE}"

if [[ -n "${SSE_OUTPUT_S3_URI}" ]]; then
  if [[ ${SSE_SKIP_OUTPUT_ON_ERROR} -ne 0 ]] && [[ ${SSE_COMMAND_EXIT_CODE} -ne 0 ]]; then
    echo -e 'The outbound sync was skipped due to the exit code.'
  else
    echo_n_eval "aws s3 ${SSE_OUTBOUND_SYNC} ${OUTPUT_DATA_DIR%/}/ ${SSE_OUTPUT_S3_URI}"
    validate_s3_uri "${SSE_OUTPUT_S3_URI}"
  fi
fi

echo
SSE_ELAPSED_SECONDS=$(( $(date +%s) - SSE_START_DATE ))
echo_n_log "TOTAL_ELAPSED_TIME:   $(date --date=@${SSE_ELAPSED_SECONDS} -u +%H:%M:%S)"

if [[ -n "${SSE_OUTPUT_LOG_S3_URI}" ]]; then
  if [[ ${SSE_SKIP_OUTPUT_ON_ERROR} -eq 0 ]] || [[ ${SSE_COMMAND_EXIT_CODE} -eq 0 ]]; then
    echo_n_eval "aws s3 cp ${SSE_OUTPUT_LOG_FILE} ${SSE_OUTPUT_LOG_S3_URI}"
    validate_s3_uri "${SSE_OUTPUT_LOG_S3_URI}"
  fi
fi

exit "${SSE_COMMAND_EXIT_CODE}"
